# A Continuous Deployment in Frontend workflow
name: CD FE Workflow

on:
  # Workflow runs when push to the main branch
  push:
    branches: [ "main" ]
  workflow_dispatch:
# Define environment
env:
  NODE_VERSION: 18.18.0
  IMAGE_REPO_NAME: frontend
  IMAGE_TAG: latest
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  linting_job:
    name: linting job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Use NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        run: |
           npm ci
           npm install eslint --save-dev

      - name: Run lint
        run: |
          npm run lint
  test_job:
    name: test job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      # Check out the code from the repository.   
      - name: Check out repository
        uses: actions/checkout@v3
      
      # Set up a Node.js environment using the specified node version.
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
      
      - name: Cache node modules
        id: cache-npm-test
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}
  
      # Install the dependencies.
      - name: Install dependencies
        run: |
          npm ci
          npm install prettier --save-dev
  
      - name: Run tests
        run: npm run test
        
  deploy:
    name:  Deploy to a Kubernetes cluster
    needs: [ linting_job, test_job]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      # Check out the code from the repository.    
      - name: Check out repository
        uses: actions/checkout@v3
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: AWS ECR Login
        uses: aws-actions/amazon-ecr-login@v2
        with: 
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name:  Build, tag, and push image to Amazon ECR
        working-directory: starter/frontend
        run: |
          kubectl get svc
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo "EXTERNALIP=$EXTERNALIP"
          docker build --build-arg REACT_APP_MOVIE_API_URL=http://$EXTERNALIP -t ${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}} .
          docker tag ${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}} 310722232770.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
          docker push 310722232770.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
        
      - name: Configure Kubeconfig Auth
        working-directory: starter/frontend/k8s
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1
    
      - name: Set image tag and apply to cluster
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=310722232770.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
          kustomize build | kubectl apply -f -
  