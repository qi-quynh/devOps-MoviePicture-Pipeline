name: CD BE Workflow
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
# Define environment  
env:
  IMAGE_REPO_NAME: backend
  PY_VERSION: 3.12.1
  IMAGE_TAG: latest

jobs:
  linting_job:
    name: linting job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      # Check out the code from the repository. 
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Use Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PY_VERSION}}
      
      - name: Install pipenv dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv flake8
  
      - name: Install dependencies
        run: |
          pipenv install
  test_job: 
    name: tests job
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      # Check out the code from the repository. 
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Use Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PY_VERSION}}
      
      - name: Install python test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv pytest
  
      - name: Install dependencies
        run: |
          pipenv install
  
      - name: Run Backend Tests
        run: | 
          pipenv run test
          
  # Build job only when the lint and test jobs pass
  build:
    name: Build job
    needs: [linting_job, test_job]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      # Check out the code from the repository.    
      - name: Check out repository
        uses: actions/checkout@v3
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: AWS ECR Login
        uses: aws-actions/amazon-ecr-login@v2
        with: 
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{env.IMAGE_REPO_NAME}} .
          docker tag ${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}  ${{ secrets.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}

      - name: Configure Kubeconfig Auth
        working-directory: starter/backend/k8s
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1

      - name: Deploy the Docker image to Amazon EKS
        run: |
          cd k8s
          kustomize edit set image backend=${{ secrets.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
          kustomize build | kubectl apply -f -
      
      - name: Check Status
        run: |
          if kubectl rollout status deployment/backend -n default --timeout=2m | grep -q 'deployment "backend" successfully rolled out'; then
            echo "Succeeded."
          else
            echo "Failed."
            exit 1
          fi